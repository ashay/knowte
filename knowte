#!/home/ashayrane/apps/bin/ruby
#!/home/ashayrane/apps/bin/ruby

# Knowte: A tool to record notes for compiling a research diary
# Copyright (C) 2010  Ashay Rane
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#########################################################################
# TODO: Add categorization to notes: Allow (1) CrUD operations on groups, (2) Adding notes to / removing notes from a group
# group create
# group delete
# group rename
# group list

# TODO: Object orientation? Seems to make better sense considering repetition of code

# TODO: Not allow blank tags

# TODO: Remove duplicate tags

# TODO: (FIXME) Needs a revamp of syntax and implementation
#		Lets keep the underlying tagging mechanism the same (file format) and only change the interface to make it more robust, flexible and intuitive


require 'date'
require 'fileutils'


####################################
# Constant definitions
####################################

$editor = ENV['EDITOR']
DEFAULT_EDITOR = "notepad"

if $editor.to_s.empty?
	$editor = DEFAULT_EDITOR.to_s
end

HOME_DIR = ENV['HOME'] +"/.rdir"
INTER_TAG_DELIM = ','
INTRA_TAG_DELIM = '-'

WINDOWS = true

if WINDOWS
	DATE_TAG_DELIM  = '$'
	DATE_FIELD_DELIM= '%'
	NOCOLOR = true
else
	DATE_TAG_DELIM  = '*'
	DATE_FIELD_DELIM= '-'
	NOCOLOR = false
end


####################################
# Class definitions
####################################

class Misc
	def Misc.checkSetup()
		if !File::exists?(HOME_DIR.to_s)
			Dir.chdir(File.dirname(HOME_DIR.to_s))
			Dir.mkdir(File.basename(HOME_DIR.to_s))
			Dir.chdir(File.basename(HOME_DIR.to_s))
			Dir.mkdir(".archive")
		end
	end

	def Misc.printUsage()
		if NOCOLOR
			commands = [ "new [tags]", "edit date / tags", "edit recent", "archive date / tags", "archive recent", "recover date / tags", "tag [file/recent [+/- tags]]", "list [date / tags]", "print date / tags", "print recent", "merge date / tags" ]
		else
			commands = [ "\033[10;34mnew\033[0m [tags]", "\033[10;34medit\033[0m date / tags", "\033[10;34medit\033[0m \033[10;34mrecent\033[0m", "\033[10;34marchive\033[0m date / tags", "\033[10;34marchive\033[0m \033[10;34mrecent\033[0m", "\033[10;34mrecover\033[0m date / tags", "\033[10;34mtag\033[0m [file/\033[10;34mrecent\033[0m [\033[10;34m+\033[0m/\033[10;34m-\033[0m tags]]", "\033[10;34mlist\033[0m [date / tags]", "\033[10;34mprint\033[0m date / tags", "\033[10;34mprint\033[0m \033[10;34mrecent\033[0m", "\033[10;34mmerge\033[0m date / tags" ]
		end
		
		Formatting.printSpecial("USAGE: \n")

		for i in 0..commands.length-1 do
			# Formatting.printSpecial(File.basename($0) + " ", "bold")
			Formatting.printSpecial(File.basename($0) + " ")
			Formatting.printSpecial(commands[i] + "\n")
		end
	end
	
	def Misc.driver()	# Main routine, I agree it is oddly named
		cliArguments = []
		cliArguments.replace(ARGV)
		ARGV.clear

		Misc.checkSetup()

		if cliArguments.length == 0
			Misc.printUsage()
			Process.exit
		end

		command = cliArguments.shift
		case command
			when "new" then		NoteHandler.newNote(cliArguments)
			when "edit" then	NoteHandler.edit(cliArguments)
			when "archive" then	NoteHandler.archive(cliArguments)
			when "tag" then		NoteHandler.tag(cliArguments)		# FIXME: Needs a revamp of syntax and implementation
			when "list" then	NoteHandler.list(cliArguments)
			when "print" then	NoteHandler.print(cliArguments)
			when "merge" then	NoteHandler.merge(cliArguments)
			when "recover" then	NoteHandler.recover(cliArguments)
			when "group" then	NoteHandler.group(cliArguments)
			else NoteHandler.handleUnknownCommand(command)
		end
	end
end

class Formatting
	def Formatting.printSpecial(text, formatting="")
		if NOCOLOR
			printf text
		else
			case formatting
				when "bold" then
					printf "\033[1m%s\033[0m", text
				when "red" then
					printf "\033[31m%s\033[0m", text
				else
					printf text
			end
		end
	end
	
	def Formatting.printErr(text)
		Formatting.printSpecial(text, "red")
	end
	
	def Formatting.splitQuottedStrings(inputString="")
		finalTags = []
		userInput = inputString.chomp.strip.gsub('"', '\'')
		splits = userInput.split('\'')
		for i in 0..splits.length-1
			if i % 2 == 1
				# Odd: Quotted strings
				newValue = splits[i].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s).chom.strip
				if newValue.empty? == false
					finalTags.push newValue
				end
			else
				# Even: Non-quotted strings
				if splits [i].empty? == false
					nestedSplits = splits [i].chomp.strip.split(' ')
					for j in 0..nestedSplits.length-1
						newValue = nestedSplits[j].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s).chomp.strip
						if newValue.empty? == false
							finalTags.push newValue
						end
					end
				end
			end
		end

		return finalTags
	end
	
	def Formatting.flattenParams(params, userInput=true)
		tags = []
		if params.length == 0
			if userInput == true
				printf "Tags: "
				return Formatting.splitQuottedStrings(gets())
			end
		else
			for i in 0..params.length-1
				tags[i] = params[i].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s)
			end
		end

		return tags
	end
	
	def Formatting.formatFilename(filename, color=true)
		fields = filename.split(DATE_TAG_DELIM)
		dateString = fields[0]
		
		if WINDOWS
			dateString = dateString.gsub(DATE_FIELD_DELIM, '-')
		end
		
		tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
		formattedString = dateString + "\t" + tagString.gsub(INTRA_TAG_DELIM.to_s, '-')

		if NOCOLOR
			return formattedString;
		else
			# Check if the caller specifically requested coloring
			if color == true
				return "\033[32m" + formattedString + "\033[0m"
			else
				return formattedString;
			end
		end
	end
end

class FileSystemInterface
	def FileSystemInterface.editFile(filename)
		FileUtils.touch(filename)
		if system($editor + " " + filename) == false
			Formatting.printErr "Could not open editor: " + $editor.to_s + "\n"
			return 1
		end

		return 0
	end

	def FileSystemInterface.readFile(filename)
		fileContents = ""
		file = File.new(filename, "r")
		while (line = file.gets)
			fileContents += line
		end

		file.close
		return fileContents
	end

	def FileSystemInterface.writeFile(filename)
		newFile = File.open(filename, File::WRONLY|File::TRUNC|File::CREAT)
		newFile.puts fileContents
		newFile.close
	end

	def FileSystemInterface.getRecentFile()
		fileList = []
		# Search for the recently modified file
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				mTime = File::mtime(HOME_DIR.to_s + "/" + entry)
				fileList.push(mTime.strftime("%Y-%m-%d-%H-%M-%S") + "." + entry)
			end
		end

		fileList.sort!	# Sort itself
		fields = fileList.last.split('.')
		return fields [1..fields.length()-1].join('.')
	end
end

class TagProcessing
	# FIXME: Might need fixing considering that the underlying tagging semantics might change
	def TagProcessing.findMatch(tags, searchTags=[])
		if searchTags.length == 0
			return true
		end

		for i in 0..searchTags.length-1
			for j in 0..tags.length-1
				if tags[j].include?(searchTags[i])
					return true
				end
			end
		end

		return false
	end
end

class Group
	def	create(grpName)
	end
	
	def rename(grpName)
	end
	
	def list
	end
	
	def delete(grpName)
	end
end

class Note
	def new(noteName="")
	end
	
	def edit(noteName="")
	end
	
	def archive(noteName="")
	end
	
	def recover(noteName="")
	end

	# FIXME: Needs a revamp of syntax and implementation	
	def tag(searchTags)
		fields = filename.split(DATE_TAG_DELIM)
		dateString = fields[0]
		tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
		tags = tagString.split(INTER_TAG_DELIM.to_s)

		if searchTags.empty?
			printf "Add(+) / Remove(-) tags (default: +)? "
			operation = gets.chomp
			if operation.empty?
				operation = "+"
			end
		else
			operation = searchTags.shift
		end

		if searchTags.empty?
			printf "Tags to be added or removed: "
			searchTags = Formatting.splitQuottedStrings(gets.chomp.strip)
			if searchTags.empty?
				return false
			end
		end

		if operation == "+"
			# Add tag
			tags = tags | searchTags

			if NOCOLOR
				printf "Add tag(s) \'" + searchTags.join('\', \'') + "\' for %s? (Y/n) ", Formatting.formatFilename(filename)
			else
				printf "Add tag(s) \033[10;32m" + searchTags.join(', ') + "\033[0m for %s? (Y/n) ", Formatting.formatFilename(filename)
			end
		else
			if operation == "-"
				# Remove tag
				tags = tags - searchTags

				if NOCOLOR
					printf "Remove tag(s) " + searchTags.join(', ') + " for %s? (Y/n) ", Formatting.formatFilename(filename)
				else
					printf "Remove tag(s) \033[10;32m" + searchTags.join(', ') + "\033[0m for %s? (Y/n) ", Formatting.formatFilename(filename)
				end			
			else
				Formatting.printErr "Invalid command, expecting '+' or '-' after 'recent'\n"
				return false
			end
		end

		userInput = gets.chomp
		if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
			File.rename(HOME_DIR.to_s + "/" + filename, HOME_DIR.to_s + "/" + dateString + DATE_TAG_DELIM + tags.join(INTER_TAG_DELIM.to_s))
			return true
		else
			return false
		end
	end
	
	def list
	end
	
	def print(noteName="")
	end
	
	def merge(noteNames=[])
	end
end

class NoteHandler
	def NoteHandler.newNote(params=[])
		tagArray = Formatting.flattenParams(params)
		tags = tagArray.join(INTER_TAG_DELIM.to_s)
		date = DateTime.now
		filename = HOME_DIR.to_s + "/" + date.year.to_s + DATE_FIELD_DELIM + date.month.to_s + DATE_FIELD_DELIM + date.day.to_s + DATE_TAG_DELIM + tags
		if FileSystemInterface.editFile(filename) == 0
			puts "Registered new note"
		end
	end
	
	def NoteHandler.edit(params=[])
		searchTags = Formatting.flattenParams(params)

		if searchTags[0] == "recent"
			filename = getRecentFile()
			if filename != ""
				printf "Edit %s? (Y/n) ", Formatting.formatFilename(filename)
				userInput = gets.chomp
				if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
					FileSystemInterface.editFile(HOME_DIR.to_s + "/" + filename)
					puts "Note edited"
				end
			else
				Formatting.printErr "Could not find any recently edited note\n"
			end

			return
		end

		count = 0
		userInput = ""
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					printf "Edit %s? (Y/n) ", Formatting.formatFilename(entry)
					userInput = gets.chomp
					if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
						FileSystemInterface.editFile(HOME_DIR.to_s + "/" + entry)
						count = count+1
					end
				end
			end
		end

		puts "Total " + count.to_s + " note(s) edited"
	end

	def NoteHandler.archive(params=[])
		searchTags = Formatting.flattenParams(params)

		if searchTags[0] == "recent"
			filename = getRecentFile()
			if filename != ""
				printf "Archive %s? (Y/n) ", Formatting.formatFilename(filename)
				userInput = gets.chomp
				if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
					File.rename(HOME_DIR.to_s + "/" + filename, HOME_DIR.to_s + "/.archive/" + filename)
					puts "Note archived"
				else
					puts "Archive aborted"
				end
			else
				Formatting.printErr "Could not find any recently edited note\n"
			end
			return
		end

		count = 0
		userInput = ""
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					printf "Archive %s? (Y/n) ", Formatting.formatFilename(entry)
					userInput = gets.chomp
					if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
						File.rename(HOME_DIR.to_s + "/" + entry, HOME_DIR.to_s + "/.archive/" + entry)
						count = count+1
					end
				end
			end
		end

		puts "Total " + count.to_s + " note(s) archived"
	end
	
	def NoteHandler.recover(params=[])
		searchTags = Formatting.flattenParams(params)

		count = 0
		Dir.foreach(HOME_DIR + "/.archive") do |entry|
			if entry != "." && entry != ".."
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					printf "Recover %s? (Y/n) ", Formatting.formatFilename(entry)
					userInput = gets.chomp
					if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
						File.rename(HOME_DIR.to_s + "/.archive/" + entry, HOME_DIR.to_s + "/" + entry)
						FileUtils.touch HOME_DIR.to_s + "/" + entry
						count = count+1
					end
				end
			end
		end

		puts "Total " + count.to_s + " note(s) recovered"
	end
	
	# FIXME: Needs a revamp of syntax and implementation
	def NoteHandler.tag(params=[])
		puts "Needs fixing\n"
# 		searchTags = Formatting.flattenParams(params, false)
# 		
# 		if searchTags[0] == "recent"
# 			filename = getRecentFile()
# 			if filename != ""
# 				if tagSingleFile(filename, searchTags) == true
# 					puts "Tags changed"
# 				else
# 					puts "Aborted changing tags"
# 				end
# 			else
# 				Formatting.printErr "Could not find any recently edited note\n"
# 			end
# 
# 			return
# 		end
# 
# 		count = 0
# 		userInput = ""
# 
# 		noteMatchTags=[]
# 		if searchTags.empty?
# 			printf "Tags to identify source note: "
# 			searchTags = Formatting.splitQuottedStrings(gets.strip.chomp)
# 		end
# 
# 		for i in 0..searchTags.length-1
# 			if searchTags[0] != "+" && searchTags[0] != "-"
# 				noteMatchTags.push searchTags.shift
# 			else
# 				break
# 			end
# 		end
# 
# 		# if noteMatchTags.length == searchTags.length
# 		#	Formatting.printErr "Incorrect syntax, expecting a +/- and at least one tag\n"
# 		#	return
# 		# end
# 
# 		Dir.foreach(HOME_DIR) do |entry|
# 			if entry != "." && entry != ".." && entry != ".archive"
# 				fields = entry.split(DATE_TAG_DELIM)
# 				dateString = fields[0]
# 				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
# 				tags = tagString.split(INTER_TAG_DELIM.to_s)
# 				tags.push dateString
# 
# 				if (TagProcessing.findMatch(tags, noteMatchTags))
# 					if tagSingleNote(entry, searchTags) == true
# 						count = count+1
# 					end
# 				end
# 			end
# 		end
# 
# 		puts "Changed tags for " + count.to_s + " note(s)"
	end
	
	def NoteHandler.list(params=[])
		searchTags = Formatting.flattenParams(params)

		count = 0
		fileList = []
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					mTime = File::mtime(HOME_DIR.to_s + "/" + entry)
					fileList.push(mTime.strftime("%Y-%m-%d-%H-%M-%S") + "." + entry)
					# puts Formatting.formatFilename(entry)
					count = count+1
				end
			end
		end

		fileList.sort!
		for i in 0..fileList.length-1
			parts = fileList[fileList.length-1-i].split('.')
			parts.shift
			puts Formatting.formatFilename(parts.join('.'))
		end

		puts "Total " + count.to_s + " note(s) displayed"
	end
	
	def NoteHandler.print(params=[])
		searchTags = Formatting.flattenParams(params)

		if searchTags[0] == "recent"
			filename = getRecentFile()
			if filename != ""
				puts Formatting.formatFilename(filename)
				puts readFile(HOME_DIR.to_s + "/" + filename)
				puts
			else
				Formatting.printErr "Could not find any recently edited note\n"
			end

			return
		end

		count = 0
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					puts Formatting.formatFilename(entry)
					puts readFile(HOME_DIR.to_s + "/" + entry)
					puts
					count = count+1
				end
			end
		end

		puts "Total " + count.to_s + " notes(s)"
	end
	
	def NoteHandler.merge(params=[])
		searchTags = Formatting.flattenParams(params)

		count = 0
		fileList = []
		origTags = []
		newTags = []
		Dir.foreach(HOME_DIR) do |entry|
			if entry != "." && entry != ".." && entry != ".archive"
				fields = entry.split(DATE_TAG_DELIM)
				dateString = fields[0]
				tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
				tags = tagString.split(INTER_TAG_DELIM.to_s)
				origTags.replace(tags)
				tags.push dateString

				if (TagProcessing.findMatch(tags, searchTags))
					printf "Use " + Formatting.formatFilename(entry) + " for merging? (Y/n) "
					userInput = gets.chomp.strip
					if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
						newTags = newTags | origTags
						fileList.push entry
						count = count+1
					end
				end
			end
		end

		if count > 1
			puts "\nMerging following notes: "
			for i in 0..fileList.length-1 do
				puts Formatting.formatFilename(fileList[i])
			end

			# printf "\nProceed? (Y/n) "
			# userInput = gets.chomp
			# if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
			# Merge them
			finalString = ""
			for i in 0..fileList.length-1 do
				finalString += Formatting.formatFilename(fileList[i], false) + ":\n" + readFile(HOME_DIR.to_s + "/" + fileList[i]) + "\n"
			end

			date = DateTime.now
			filename = HOME_DIR.to_s + "/" + date.year.to_s + DATE_FIELD_DELIM + date.month.to_s + DATE_FIELD_DELIM + date.day.to_s + DATE_TAG_DELIM + newTags.join(INTER_TAG_DELIM.to_s)
			writeFile(filename, finalString.chomp)

			# Open $editor
			if FileSystemInterface.editFile(filename) == 0
				# Delete old files
				for i in 0..fileList.length-1 do
					if fileList[i] != filename
						File.rename(HOME_DIR.to_s + "/" + fileList[i], HOME_DIR.to_s + "/.archive/" + fileList[i])
					end
				end
			end
			
			puts "Merged notes"
			# else
			# 	puts "Aborted merging notes"
			# end
		else
			if count == 1
				puts "Only one note matched your criteria: " + Formatting.formatFilename(fileList[0])
			else
				puts "No notes merged your criteria"
			end
		end
	end
	
	def NoteHandler.group(params=[])
	end
	
	def NoteHandler.handleUnknownCommand(command)
		puts "Unknown command: '" + command + "'"
		Process.exit
	end
end

# FIXME: Needs a revamp of syntax and implementation
# FIXME: Also needs to go under the TagProcessing class
def tagSingleNote(filename, searchTags)
	fields = filename.split(DATE_TAG_DELIM)
	dateString = fields[0]
	tagString = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
	tags = tagString.split(INTER_TAG_DELIM.to_s)

	if searchTags.empty?
		printf "Add(+) / Remove(-) tags (default: +)? "
		operation = gets.chomp
		if operation.empty?
			operation = "+"
		end
	else
		operation = searchTags.shift
	end

	if searchTags.empty?
		printf "Tags to be added or removed: "
		searchTags = Formatting.splitQuottedStrings(gets.chomp.strip)
		if searchTags.empty?
			return false
		end
	end

	if operation == "+"
		# Add tag
		tags = tags | searchTags

		if NOCOLOR
			printf "Add tag(s) \'" + searchTags.join('\', \'') + "\' for %s? (Y/n) ", Formatting.formatFilename(filename)
		else
			printf "Add tag(s) \033[10;32m" + searchTags.join(', ') + "\033[0m for %s? (Y/n) ", Formatting.formatFilename(filename)
		end
	else
		if operation == "-"
			# Remove tag
			tags = tags - searchTags

			if NOCOLOR
				printf "Remove tag(s) " + searchTags.join(', ') + " for %s? (Y/n) ", Formatting.formatFilename(filename)
			else
				printf "Remove tag(s) \033[10;32m" + searchTags.join(', ') + "\033[0m for %s? (Y/n) ", Formatting.formatFilename(filename)
			end			
		else
			Formatting.printErr "Invalid command, expecting '+' or '-' after 'recent'\n"
			return false
		end
	end

	userInput = gets.chomp
	if userInput.empty? || userInput.downcase == "yes" || userInput.downcase == "y"
		File.rename(HOME_DIR.to_s + "/" + filename, HOME_DIR.to_s + "/" + dateString + DATE_TAG_DELIM + tags.join(INTER_TAG_DELIM.to_s))
		return true
	else
		return false
	end
end

Misc.driver()