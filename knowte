#!/usr/bin/env ruby

# Knowte: A tool to record notes for compiling a research diary
# Copyright (C) 2010  Ashay Rane
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


#########################################################################
# TODO: Remove duplicate tags, not allow blank tags in retagging mechanism

require 'date'
require 'fileutils'
require 'securerandom'

####################################
# FC definitions
####################################

$editor = ENV['EDITOR']
DEFAULT_EDITOR = "vi"

if $editor.to_s.empty?
    $editor = DEFAULT_EDITOR.to_s
end

HOME_DIR = ENV['HOME'] +"/Google Drive/rdir"
INTER_TAG_DELIM = ','
INTRA_TAG_DELIM = '-'
DATE_FIELD_DELIM= '-'
DATE_TAG_DELIM  = '^'

if RUBY_PLATFORM =~ /mswin32/
    class FC
        BLUE = ""
        GREEN = ""
        RED = ""
        BOLD = ""

        ENDF = ""
    end
else
    class FC
        BLUE = "\033[34m"
        GREEN = "\033[32m"
        RED = "\033[31m"
        BOLD = "\033[1m"

        ENDF = "\033[0m"
    end
end


####################################
# Class definitions
####################################

class Misc
    def Misc.check_setup()
        if !File::exists?(HOME_DIR.to_s)
            Dir.chdir(File.dirname(HOME_DIR.to_s))
            Dir.mkdir(File.basename(HOME_DIR.to_s))
            Dir.chdir(File.basename(HOME_DIR.to_s))
            Dir.mkdir("blobs")
        end
    end

    def Misc.print_usage()
        commands = [
            FC::BLUE + "new" + FC::ENDF + " [tags]",
            FC::BLUE + "edit" + FC::ENDF + " " + FC::BLUE + "recent" + FC::ENDF + " " + FC::GREEN + "|" + FC::ENDF + " [date / tags]",
            FC::BLUE + "list" + " " + FC::BLUE + "recent" + FC::ENDF + " " + FC::GREEN + "|" + FC::ENDF + FC::ENDF + " [date / tags]",
            FC::BLUE + "print" + " " + FC::BLUE + "recent" + FC::ENDF + " " + FC::GREEN + "|" + FC::ENDF + FC::ENDF + " [date / tags]",
            FC::BLUE + "remove" + " " + FC::BLUE + "recent" + FC::ENDF + " " + FC::GREEN + "|" + FC::ENDF + FC::ENDF + " [date / tags]",
            FC::BLUE + "blob" + " " + FC::BLUE + "clean" + FC::ENDF + " " + FC::GREEN + "|" + FC::ENDF + FC::ENDF + " + <files>",
            FC::BLUE + "search" + FC::ENDF + " <keywords>",
            FC::BLUE + "tag" + FC::ENDF + " [file/" + FC::BLUE + "recent" + FC::ENDF + " " + FC::BLUE + "+" + FC::ENDF + FC::BLUE + "-" + FC::ENDF + " tags]]",
            FC::BLUE + "merge" + FC::ENDF + " [date / tags]",
        ]

        Formatting.print_special("USAGE: \n")

        for i in 0..commands.length-1 do
            Formatting.print_special(FC::GREEN + File.basename($0) + FC::ENDF + " ", "bold")
            Formatting.print_special(commands[i] + "\n")
        end
    end

    def Misc.driver()    # Main routine, I agree it is oddly named
        cli_arguments = []
        cli_arguments.replace(ARGV)
        ARGV.clear

        Misc.check_setup()

        if cli_arguments.length == 0
            Misc.print_usage()
            Process.exit
        end

        command = cli_arguments.shift
        case command
            when "new"      then    NoteHandler.new_note(cli_arguments)
            when "edit"     then    NoteHandler.edit(cli_arguments)

            # FIXME: Needs a revamp of syntax and implementation
            when "tag"      then    NoteHandler.tag(cli_arguments)

            when "list"     then    NoteHandler.list(cli_arguments)
            when "print"    then    NoteHandler.print(cli_arguments)
            when "remove"   then    NoteHandler.remove(cli_arguments)
            when "merge"    then    NoteHandler.merge(cli_arguments)
            when "blob"     then    NoteHandler.blob(cli_arguments)
            when "search"   then    NoteHandler.search(cli_arguments)
            else NoteHandler.handle_unknown_command(command)
        end
    end
end

class Formatting
    def Formatting.print_special(text, formatting = "")
        case formatting
            when "bold" then
                printf FC::BOLD + "%s" + FC::ENDF, text
            when "red" then
                printf FC::RED + "%s" + FC::ENDF, text
            else
                printf text
        end
    end

    def Formatting.print_err(text)
        Formatting.print_special(text, "red")
    end

    def Formatting.split_quotted_strings(input_string = "")
        final_tags = []
        user_input = input_string.chomp.strip.gsub('"', '\'')
        splits = user_input.split('\'')
        for i in 0..splits.length-1
            if i % 2 == 1
                # Odd: Quotted strings
                new_value = splits[i].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s).chom.strip
                if new_value.empty? == false
                    final_tags.push new_value
                end
            else
                # Even: Non-quotted strings
                if splits [i].empty? == false
                    nested_splits = splits [i].chomp.strip.split(' ')
                    for j in 0..nested_splits.length-1
                        new_value = nested_splits[j].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s).chomp.strip
                        if new_value.empty? == false
                            final_tags.push new_value
                        end
                    end
                end
            end
        end

        return final_tags
    end

    def Formatting.flatten_params(params, user_input = true)
        tags = []
        if params.length == 0
            if user_input == true
                printf "Tags: "
                return Formatting.split_quotted_strings(gets())
            end
        else
            for i in 0..params.length-1
                tags[i] = params[i].gsub(/[ \/]/, INTRA_TAG_DELIM.to_s)
            end
        end

        return tags
    end

    def Formatting.format_filename(filename, color = true)
        fields = filename.split(DATE_TAG_DELIM)
        date_string = fields[0]

        m_time = File::mtime(HOME_DIR.to_s + "/" + filename)
        str_m_time = m_time.strftime("%I:%M %p")

        tag_string = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
        formatted_string = date_string + " (" + str_m_time + ")\t\t" + tag_string.gsub(INTRA_TAG_DELIM.to_s, '-')

        if color
            return FC::GREEN + formatted_string + FC::ENDF
        else
            return formatted_string
        end

    end
end

class FileSystemInterface
    def FileSystemInterface.edit_file(filename)
        FileUtils.touch(filename)
        if system($editor + " \"" + filename + "\"") == false
            Formatting.print_err "Could not open editor: " + $editor.to_s + "\n"
            return 1
        end

        return 0
    end

    def FileSystemInterface.read_file(filename)
        file_contents = ""
        file = File.new(filename, "r")
        while (line = file.gets)
            file_contents += line
        end

        file.close
        return file_contents
    end

    def FileSystemInterface.write_file(filename, file_contents)
        new_file = File.open(filename, File::WRONLY|File::TRUNC|File::CREAT)
        new_file.puts file_contents
        new_file.close
    end

     def FileSystemInterface.get_recent_file()
        file_list = []
        # Search for the recently modified file
        Dir.foreach(HOME_DIR) do |entry|
            if entry != "." && entry != ".."
                m_time = File::mtime(HOME_DIR.to_s + "/" + entry)
                file_list.push(m_time.strftime("%Y-%m-%d-%H-%M-%S") + "." + entry)
            end
        end

        file_list.sort!    # Sort itself
        fields = file_list.last.split('.')
        return fields [1..fields.length()-1].join('.')
    end
end

class TagProcessing
    def TagProcessing.process_special_tags(search_tags = [])
        for i in 0..search_tags.length-1
            case search_tags[i].downcase
                when "today"
                    date = DateTime.now
                    search_tags.push(date.year.to_s + "-" + date.month.to_s + "-" + date.day.to_s)

                when "yesterday"
                    date = DateTime.now-1
                    search_tags.push(date.year.to_s + "-" + date.month.to_s + "-" + date.day.to_s)

                when "yest"
                    date = DateTime.now-1
                    search_tags.push(date.year.to_s + "-" + date.month.to_s + "-" + date.day.to_s)
            end
        end
    end

    def TagProcessing.find_match(tags, search_tags = [])
        if search_tags.length == 0
            return true
        end

        # Does ANDing of search terms
        for i in 0..search_tags.length-1
            b_found = 0
            for j in 0..tags.length-1
                if (".*" + tags[j].downcase + ".*").match(search_tags[i].downcase)
                    b_found = 1
                    break
                end
            end

            if b_found == 0
                return false
            end
        end

        return true
    end

    def TagProcessing.get_tags(note_name = "")
        tags = []
        if note_name != ""
            note_parts = note_name.split(DATE_TAG_DELIM)
            if note_parts [1] != nil
                tags.replace(note_parts[1].split(INTER_TAG_DELIM))
            end
        end

        return tags
    end
end

class Note
    def Note.edit(filename = "")
        FileSystemInterface.edit_file(filename)
    end

    def Note.tag_note(filename = "", search_tags = [])
        tags = TagProcessing.get_tags(filename)
        date_string = filename.split(DATE_TAG_DELIM)[0]

        if search_tags.empty?
            printf "Add(+) / Remove(-) tags (default: +)? "
            operation = gets.chomp
            if operation.empty?
                operation = "+"
            end
        else
            operation = search_tags.shift
        end

        if search_tags.empty?
            if operation == "+"
                printf "Tags to be added: "
            else
                printf "Tags to be removed: "
            end

            search_tags = Formatting.split_quotted_strings(gets.chomp.strip)
            if search_tags.empty?
                return false
            end
        end

        if operation == "+"
            new_tags = (tags | search_tags).uniq
        else
            tag_found = false
            for i in 0..search_tags.length-1
                if tags.include?(search_tags[i])
                    tag_found = true
                    break
                end
            end

            if tag_found == false
                puts "The tag: \"" + search_tags[i] + "\" was not found to be associated with the note: " + Formatting.format_filename(filename)+  ". Skipping this note.\n"
                return false
            end

            new_tags = (tags - search_tags).uniq
        end

        new_filename = date_string + DATE_TAG_DELIM + new_tags.join(INTER_TAG_DELIM.to_s)
        if new_tags.length > 0 and File.exist?(HOME_DIR.to_s + "/" + new_filename)
            printf "A note with the tag(s) \"%s\" already exists. (Merge/overwrite/q)? ", FC::GREEN + tags.join(', ') + FC::ENDF
            user_input = gets.chomp
            if user_input.empty? || user_input.downcase == "merge" || user_input.downcase == "m"
                Note.merge([filename, new_filename], new_tags)
                return true
            else
                if user_input.downcase == "quit" || user_input.downcase == "q"
                    return false
                else
                    if user_input.downcase == "overwrite" || user_input.downcase = "o"
                        File.rename(HOME_DIR.to_s + "/" + filename, HOME_DIR.to_s + "/" + date_string + DATE_TAG_DELIM + new_tags.join(INTER_TAG_DELIM.to_s))
                        return true
                    end
                end
            end
        end

        if operation == "+"
            printf "Add tag(s) " + FC::GREEN + search_tags.join(', ') + FC::ENDF + " for %s? (Y/n) ", Formatting.format_filename(filename)
        else
            if operation == "-"
                if new_tags.length == 0
                    puts "Did not change tags because resulting set of tags was empty."
                    return
                end

                printf "Remove tag(s) " + FC::GREEN + search_tags.join(', ') + FC::ENDF + " for %s? (Y/n) ", Formatting.format_filename(filename)
            else
                Formatting.print_err "Invalid command, expecting '+' or '-' after 'recent'\n"
                return
            end
        end

        user_input = gets.chomp
        if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
            File.rename(HOME_DIR.to_s + "/" + filename, HOME_DIR.to_s + "/" + date_string + DATE_TAG_DELIM + new_tags.join(INTER_TAG_DELIM.to_s))
            return true
        else
            return false
        end
    end

    def Note.print(filename = "")
        puts Formatting.format_filename(filename)
        puts FileSystemInterface.read_file(HOME_DIR.to_s + "/" + filename)
        puts
    end

    def Note.merge(merge_file_list = [], new_tags = "")
        if merge_file_list.length > 1
            puts "\nMerging following notes: "
            for i in 0..merge_file_list.length-1 do
                puts Formatting.format_filename(merge_file_list[i])
            end

            # Merge them
            final_string = ""
            for i in 0..merge_file_list.length-1 do
                final_string += Formatting.format_filename(merge_file_list[i], false) + ":\n" + FileSystemInterface.read_file(HOME_DIR.to_s + "/" + merge_file_list[i]) + "\n"
            end

            date = DateTime.now
            filename = HOME_DIR.to_s + "/" + date.year.to_s + DATE_FIELD_DELIM + date.month.to_s + DATE_FIELD_DELIM + date.day.to_s + DATE_TAG_DELIM + new_tags.join(INTER_TAG_DELIM.to_s)
            FileSystemInterface.write_file(filename, final_string.chomp)

            # Open $editor
            if FileSystemInterface.edit_file(filename) == 0
                # FIXME: Delete old files (merge_file_list)
            end

            puts "Merged notes"
        else
            if merge_file_list.length == 1
                puts "Only one note matched your criteria: " + Formatting.format_filename(merge_file_list[0]) + ". Cannot merge."
            else
                puts "No notes merged your criteria"
            end
        end
    end
end

class NoteHandler
    def NoteHandler.new_note(params = [])
        tag_array = Formatting.flatten_params(params)
        if tag_array.length != 0
            tag_array.uniq!
            tags = tag_array.join(INTER_TAG_DELIM.to_s)
            date = DateTime.now
            filename = HOME_DIR.to_s + "/" + date.year.to_s + DATE_FIELD_DELIM + date.month.to_s + DATE_FIELD_DELIM + date.day.to_s + DATE_TAG_DELIM + tags
            if FileSystemInterface.edit_file(filename) == 0
                puts "Registered new note"
            end
        else
            puts "Did not register note. At least one tag is required."
        end
    end

    def NoteHandler.edit(params = [])
        search_tags = Formatting.flatten_params(params)
        file_list = NoteHandler.find_relevant_notes(search_tags)

        count = 0
        for i in 0..file_list.length-1
            filename = file_list[i]
            printf "Edit %s? (Y/n/q) ", Formatting.format_filename(filename)
            user_input = gets.chomp
            if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
                FileSystemInterface.edit_file(HOME_DIR.to_s + "/" + filename)
                count = count+1
            else
                if user_input.downcase == "quit" || user_input.downcase == "q"
                    break
                end
            end
        end

        puts "Total " + count.to_s + " note(s) edited"
    end

    # FIXME: Needs a revamp of syntax and implementation
    def NoteHandler.tag(params = [])
         search_tags = Formatting.flatten_params(params, false)

        note_match_tags = []
         for i in 0..search_tags.length-1
             if search_tags[0] != "+" && search_tags[0] != "-"
                 note_match_tags.push search_tags.shift
             else
                 break
             end
         end

        count = 0
        file_list = NoteHandler.find_relevant_notes(note_match_tags)
        for i in 0..file_list.length-1
            entry = file_list[i]
            printf "Tag %s? (Y/n/q) ", Formatting.format_filename(entry)
            user_input = gets.chomp
            if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
                if Note.tag_note(file_list[i], search_tags) == true
                    count = count+1
                end
            else
                if user_input.downcase == "quit" || user_input.downcase == "q"
                    break
                end
            end
        end

         puts "Changed tags for " + count.to_s + " note(s)"
    end

    def NoteHandler.find_relevant_notes(search_tags = [])
        matching_files = Array.new
        TagProcessing.process_special_tags(search_tags)

        search_folder = HOME_DIR.to_s
        if search_tags[0] == "recent"
            filename = FileSystemInterface.get_recent_file()
            if filename != ""
                matching_files.push(filename)
            end

            return matching_files
        end

        Dir.foreach(search_folder) do |entry|
            if entry != "." && entry != ".." && entry != "archive" &&
                    entry != "blobs"
                fields = entry.split(DATE_TAG_DELIM)
                date_string = fields[0]
                tag_string = fields[1..fields.length()-1].join(DATE_TAG_DELIM).gsub(INTER_TAG_DELIM.to_s, ', ')
                tags = tag_string.split(INTER_TAG_DELIM.to_s)
                tags.push date_string

                if (TagProcessing.find_match(tags, search_tags))
                    matching_files.push(entry)
                end
            end
        end

        return matching_files
    end

    def NoteHandler.list(params = [])
        search_tags = Formatting.flatten_params(params)
        file_list = NoteHandler.find_relevant_notes(search_tags)

        file_list.sort!
        for i in 0..file_list.length-1
            # Showing most recent note first
            puts Formatting.format_filename(file_list[file_list.length-1-i], true)
        end

        puts "Total " + file_list.count.to_s + " note(s) displayed"
    end

    def NoteHandler.print(params = [])
        search_tags = Formatting.flatten_params(params)

        file_list = NoteHandler.find_relevant_notes(search_tags)
        for i in 0..file_list.length-1
            Note.print(file_list[i])
        end

        puts "Total " + file_list.length.to_s + " notes(s)"
    end

    def NoteHandler.remove(params = [])
        search_tags = Formatting.flatten_params(params)
        file_list = NoteHandler.find_relevant_notes(search_tags)

        count = 0
        for i in 0..file_list.length-1
            filename = file_list[i]
            printf "Remove %s? (Y/n/q) ", Formatting.format_filename(filename)
            user_input = gets.chomp
            if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
                FileUtils.remove(HOME_DIR.to_s + "/" + filename)
                count += 1
            else
                if user_input.downcase == "quit" || user_input.downcase == "q"
                    break
                end
            end
        end

        puts "Total " + count.to_s + " note(s) removed."
    end

    def NoteHandler.merge(params = [])
        search_tags = Formatting.flatten_params(params)

        new_tags = []
        note_tags = []
        merge_file_list = []
        file_list = NoteHandler.find_relevant_notes(search_tags)
        for i in 0..file_list.count-1
            entry = file_list [i]
            printf "Use " + Formatting.format_filename(entry) + " for merging? (Y/n/q) "
            user_input = gets.chomp.strip
            if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
                new_tags = new_tags | TagProcessing.get_tags(entry)
                merge_file_list.push entry
            else
                if user_input.downcase == "quit" || user_input.downcase == "q"
                    break
                end
            end
        end

        Note.merge(merge_file_list, new_tags)
    end

    def NoteHandler.blob(params = [])
        error = false
        if params.length < 1
            error = true
        end

        if params[0] == "+"
            actual_params = params.last(params.length - 1)
            self.add_blob(actual_params)
        elsif params[0] == "clean"
            actual_params = params.last(params.length - 1)
            self.clean_blobs(actual_params)
        else
            puts FC::RED + "Error" + FC::ENDF + ": Invalid options."
        end
    end

    def NoteHandler.add_blob(params)
        error = false
        if params.length < 1
            error = true
        end

        if error == false
            # Check whether the file path list is valid.
            for i in 0..params.length - 1 do
                file = params[i]
                if File.exists?(file) == false or File.directory?(file) == true
                    error = true
                    break
                end
            end
        end

        if error == true
            puts FC::RED + "Error" + FC::ENDF +
                    ": Need a list of valid file paths."
            return
        end

        # For each file, generate a GUID and append it to the filename
        # and copy it over to the .blobs directory.
        count = 0
        for i in 0..params.length - 1 do
            uuid = SecureRandom.uuid
            abs_path = File.expand_path(params[i])
            mangled_name = abs_path.gsub('/', '^')
            filename = uuid + ":" + mangled_name

            # Copy abs_path into "blobs/" + filename.
            FileUtils.copy_file(abs_path, HOME_DIR.to_s + "/blobs/" + filename)
            count += 1
        end

        puts "Added " + count.to_s + " new blob(s)."
    end

    def NoteHandler.clean_blobs(params)
        count = 0
        file_list = []

        # First gather all referenced blobs.
        Dir.foreach(HOME_DIR) do |entry|
            if entry != "." && entry != ".." && entry != "blobs"
                contents = FileSystemInterface.read_file(HOME_DIR.to_s + "/" + entry)
                matches = contents.match(/[^(]*([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[^\)]*)[^)]*/)
                if matches != nil
                    file_list << matches.to_s
                end
            end
        end

        # Now loop over all blobs and remove them if they are never referenced.
        Dir.foreach(HOME_DIR + "/blobs") do |entry|
            if entry != "." and entry != ".." and file_list.include?(entry) == false
                printf "Remove blob %s? (Y/n/q) ", FC::GREEN + entry + FC::ENDF
                user_input = gets.chomp
                if user_input.empty? || user_input.downcase == "yes" || user_input.downcase == "y"
                    FileUtils.remove(HOME_DIR + "/blobs/" + entry)
                    count += 1
                else
                    if user_input.downcase == "quit" || user_input.downcase == "q"
                        break
                    end
                end
            end
        end

        puts "Total " + count.to_s + " unreferenced blob(s) removed."
    end

    def NoteHandler.search(params = [])
        count = 0
        Dir.foreach(HOME_DIR) do |entry|
            if entry != "." and entry != ".." and entry != "blobs"
                contents = FileSystemInterface.read_file(HOME_DIR.to_s + "/" + entry)
                found = true
                for i in 0..params.length - 1 do
                    param = ".*" + params[i] + ".*"
                    if contents.match(param) == nil
                        found = false
                        break
                    end
                end

                if found == true
                    puts Formatting.format_filename(entry)
                    count += 1
                end
            end
        end

        puts "Total " + count.to_s + " note(s) matched."
    end

    def NoteHandler.handle_unknown_command(command)
        puts "Unknown command: '" + command + "'"
        Process.exit
    end
end

Misc.driver()
